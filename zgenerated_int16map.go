// generated by go run internal/gen.go -naturalType int16; DO NOT EDIT.

// Copyright (c) 2018, Bruno M V Souza <github@b.bmvs.io>. All rights reserved.
// Use of this source code is governed by a BSD-2-Clause license that can be
// found in the LICENSE file.

package orderedmap

import "sync"

// NewInt16Map return a new Map implemented by Int16Map
func NewInt16Map() *Int16Map {
	return &Int16Map{
		store: map[int16]interface{}{},
		keys:  []int16{},
	}
}

// Int16Map insertion ordered Map implementation
type Int16Map struct {
	sync.Mutex

	store map[int16]interface{}
	keys  []int16
}

// Put add a key-value pair to the Int16Map
func (m *Int16Map) Put(key int16, value interface{}) {
	m.Lock()
	defer m.Unlock()

	if _, found := m.store[key]; !found {
		m.keys = append(m.keys, key)
	}

	m.store[key] = value
}

// Get return the value of a key from the Int16Map
func (m *Int16Map) Get(key int16) (value interface{}, found bool) {
	m.Lock()
	defer m.Unlock()

	value, found = m.store[key]
	return
}

// Remove remove a key-value pair from the Int16Map
func (m *Int16Map) Remove(key int16) {
	m.Lock()
	defer m.Unlock()

	if _, found := m.store[key]; !found {
		return
	}

	delete(m.store, key)

	for i, _ := range m.keys {
		if m.keys[i] == key {
			m.keys = append(m.keys[:i], m.keys[i+1:]...)
			break
		}
	}
}

// Empty return if the Int16Map in empty or not
func (m *Int16Map) Empty() bool {
	m.Lock()
	defer m.Unlock()

	return len(m.store) == 0
}

// Keys return the keys of the Int16Map in insertion order
func (m *Int16Map) Keys() []int16 {
	m.Lock()
	defer m.Unlock()

	return m.keys
}

// Values return the values of the Int16Map in insertion order
func (m *Int16Map) Values() []interface{} {
	m.Lock()
	defer m.Unlock()

	values := make([]interface{}, len(m.store))
	for i, key := range m.keys {
		values[i] = m.store[key]
	}
	return values
}

// Size return the size of the Int16Map
func (m *Int16Map) Size() int {
	m.Lock()
	defer m.Unlock()

	return len(m.store)
}
